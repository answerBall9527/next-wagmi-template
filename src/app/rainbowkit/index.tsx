import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../../styles/Home.module.css';
import { useAccount, useChainId, useConnections, useSignMessage } from 'wagmi';
import { useEffect } from 'react';

import '@rainbow-me/rainbowkit/styles.css';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { Chain, RainbowKitProvider } from '@rainbow-me/rainbowkit';

import { connectorsForWallets } from '@rainbow-me/rainbowkit';
import { rainbowWallet, walletConnectWallet } from '@rainbow-me/rainbowkit/wallets';

import { WagmiProvider, createConfig, createConnector } from 'wagmi';
import { arbitrum, base, mainnet, optimism, polygon } from 'viem/chains';
import { DefaultWalletOptions, Wallet } from '@rainbow-me/rainbowkit/dist/wallets/Wallet';
import { EIP1193Provider } from 'viem/_types/types/eip1193';
import { injected } from 'wagmi/connectors';
import type { EthereumProvider as EthereumProviderInstance } from '@tomo-inc/tomo-telegram-sdk'


const client = new QueryClient();

const logoUrl = "https://d13t1x9bdoguib.cloudfront.net/static/tomo.svg"
const tomoWallet = ({
  walletConnectParameters,
  projectId,
}: DefaultWalletOptions): Wallet => {
  let provider: unknown | EIP1193Provider
  return {
    id: 'TomoWallet',
    name: 'Tomo Wallet',
    // iconUrl: sdk.getAppInfo().logo,
    iconUrl: logoUrl,
    installed: true,
    iconBackground: '#000000',
    createConnector: (walletDetails) => {
      return createConnector((config) => ({
        ...injected({
          // shimDisconnect: false
        })(config),
        ...walletDetails,
        getProvider: async () => {
          if (provider) return provider
          const EthereumProvider = (await import("@tomo-inc/tomo-telegram-sdk/dist/tomoEvmProvider.esm")).EthereumProvider as typeof EthereumProviderInstance
          const sdk: EthereumProviderInstance = new EthereumProvider({
            metaData: {
              icon: walletConnectParameters?.metadata?.icons?.[0] || '',
              name: walletConnectParameters?.metadata?.name || '',
              description: walletConnectParameters?.metadata?.description,
              url: walletConnectParameters?.metadata?.url,
            }
          })
          provider = sdk
          return provider
        },
      }))
    },

  };
};

const chains: readonly [Chain, ...Chain[]] = [
  mainnet,
  polygon,
  optimism,
  arbitrum,
  base,
];


const connectors = connectorsForWallets(
  [
    {
      groupName: 'Recommended',
      wallets: [tomoWallet, rainbowWallet, walletConnectWallet],
    },
  ],
  {
    appName: 'test demo',
    projectId: 'YOUR_PROJECT_ID',
  }
);

const config = createConfig({
  // use rainbowkit wallets
  connectors,

  // only use wagmi connectors
  chains: chains,
  // https://wagmi.sh/react/api/transports
  transports: {
  //   [mainnet.id]: http("<YOUR_RPC_URL>")
  }
});

const RainbowKit: NextPage = () => {
  const account = useAccount();
  const connections = useConnections()
  const chainId = useChainId()
  const { signMessageAsync } = useSignMessage()

  useEffect(() => {
    console.log({ account })
  }, [account])

  useEffect(() => {
    console.log({ chainId })
  }, [chainId])

  useEffect(() => {
    console.log({ connections })
  }, [connections])

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        {!!signMessageAsync && <button onClick={() => signMessageAsync({ message: 'sign test msg' })}>sign msg</button>}

        <h1 className={styles.title}>
          Welcome to <a href="">RainbowKit</a> + <a href="">wagmi</a> +{' '}
          <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <div className={styles.grid}>
          <a className={styles.card} href="https://rainbowkit.com">
            <h2>RainbowKit Documentation &rarr;</h2>
            <p>Learn how to customize your wallet connection flow.</p>
          </a>

          <a className={styles.card} href="https://wagmi.sh">
            <h2>wagmi Documentation &rarr;</h2>
            <p>Learn how to interact with Ethereum.</p>
          </a>

          <a
            className={styles.card}
            href="https://github.com/rainbow-me/rainbowkit/tree/main/examples"
          >
            <h2>RainbowKit Examples &rarr;</h2>
            <p>Discover boilerplate example RainbowKit projects.</p>
          </a>

          <a className={styles.card} href="https://nextjs.org/docs">
            <h2>Next.js Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a
            className={styles.card}
            href="https://github.com/vercel/next.js/tree/canary/examples"
          >
            <h2>Next.js Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            className={styles.card}
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

function MyApp() {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={client}>
        <RainbowKitProvider>
          <RainbowKit />
        </RainbowKitProvider>
      </QueryClientProvider>
    </WagmiProvider>

  );
}



export default MyApp;